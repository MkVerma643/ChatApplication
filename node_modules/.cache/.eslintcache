[{"C:\\React\\WebChat\\src\\index.js":"1","C:\\React\\WebChat\\src\\App.js":"2","C:\\React\\WebChat\\src\\reduxstore\\store.js":"3","C:\\React\\WebChat\\src\\reduxstore\\middleware.js":"4","C:\\React\\WebChat\\src\\reduxstore\\reducer.js":"5","C:\\React\\WebChat\\src\\components\\Home.jsx":"6","C:\\React\\WebChat\\src\\components\\Chat.jsx":"7","C:\\React\\WebChat\\src\\components\\Login.jsx":"8","C:\\React\\WebChat\\src\\components\\socket.js":"9","C:\\React\\WebChat\\src\\reduxstore\\thunk.js":"10","C:\\React\\WebChat\\src\\components\\Users.jsx":"11"},{"size":426,"mtime":1626420082539,"results":"12","hashOfConfig":"13"},{"size":1078,"mtime":1626420082529,"results":"14","hashOfConfig":"13"},{"size":254,"mtime":1626420082542,"results":"15","hashOfConfig":"13"},{"size":356,"mtime":1626420082541,"results":"16","hashOfConfig":"13"},{"size":1107,"mtime":1626420082541,"results":"17","hashOfConfig":"13"},{"size":3971,"mtime":1626420244008,"results":"18","hashOfConfig":"13"},{"size":5317,"mtime":1626420225855,"results":"19","hashOfConfig":"13"},{"size":1769,"mtime":1626420507287,"results":"20","hashOfConfig":"13"},{"size":100,"mtime":1626420082535,"results":"21","hashOfConfig":"13"},{"size":401,"mtime":1626420082543,"results":"22","hashOfConfig":"13"},{"size":3388,"mtime":1626420261594,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"g1g685",{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"C:\\React\\WebChat\\src\\index.js",[],["53","54"],"C:\\React\\WebChat\\src\\App.js",["55","56","57","58","59"],"import React from \"react\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport \"./App.css\";\r\nimport Chat from \"./components/Chat\";\r\nimport Home from \"./components/Home\";\r\nimport Login from \"./components/Login\";\r\nimport { connect } from \"react-redux\";\r\nimport io from \"socket.io-client\";\r\nimport { BrowserRouter, Route, useHistory } from \"react-router-dom\";\r\n\r\nfunction App(props) {\r\n  return (\r\n    <>\r\n      <nav className=\"navbar navbar-dark bg-dark p-2 \">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          WebChat\r\n        </a>\r\n      </nav>\r\n      <BrowserRouter>\r\n        <Route\r\n          exact\r\n          path=\"/chat\"\r\n          component={props.isloggedin ? Chat : Login}\r\n        ></Route>\r\n        <Route exact path=\"/ChatApplication\" component={Login}></Route>\r\n      </BrowserRouter>\r\n      {/* <Home/> */}\r\n      {/* {\r\n          props.isloggedin?  <Home/> :  <Login/> \r\n        } */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(function (state, props) {\r\n  console.log(\"state\", state);\r\n  return {\r\n    isloggedin: state?.isloggedin,\r\n  };\r\n})(App);\r\n","C:\\React\\WebChat\\src\\reduxstore\\store.js",[],"C:\\React\\WebChat\\src\\reduxstore\\middleware.js",[],"C:\\React\\WebChat\\src\\reduxstore\\reducer.js",["60","61"],"import React from 'react'\r\n\r\nconst reducerFun = (state = {messages : {general: []}}, action) => {\r\n    switch(action.type){\r\n        case \"ENTER\":{ \r\n            console.log(\"hit meeeee\",action)\r\n            state = {...state}\r\n            state[\"isloggedin\"] = true \r\n            state[\"user\"] = action.payload\r\n            state['CurrentChat'] = {\r\n                isChannel: true,\r\n                chatName: \"general\",\r\n                receiverId: \"\"\r\n              }\r\n            return state\r\n        }\r\n        case \"CURRENT CHAT\":{\r\n            state = {...state}\r\n            state['CurrentChat'] = action.payload\r\n            // console.log(\"ressducer....\",state[\"CurrentChat\"])\r\n            return state\r\n        }\r\n        case \"MESSAGES\": {\r\n            console.log(\"hahahhhaa\",action)\r\n            state = {...state}\r\n            state['messages'] = action.payload\r\n            return state\r\n        }\r\n        case \"USERS\": {\r\n            state = {...state}\r\n            state[\"allusers\"] = action.payload\r\n            return state\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default reducerFun\r\n","C:\\React\\WebChat\\src\\components\\Home.jsx",["62","63"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport Users from \"./Users\";\r\nimport { connect } from \"react-redux\";\r\nimport io from \"socket.io-client\";\r\nimport { useParams } from \"react-router\";\r\nconst socket = io(\"http://localhost:7000\");\r\nfunction Chat(props) {\r\n  if (props.isloggedin != true) {\r\n    props.history.push(\"/\");\r\n  }\r\n  console.log(\"chatssss\", props);\r\n  const params = useParams();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chat, setChat] = useState([]);\r\n  const [people, setPeople] = useState([]);\r\n  console.log(\"chatttttsssss\", chat);\r\n  useEffect(() => {\r\n    socket.on(\"new-client\", (user) => {\r\n      console.log(\"new online user found.....\", user);\r\n      setPeople(user);\r\n    });\r\n\r\n    socket.on(\"message\", (payload) => {\r\n      setChat([...chat, payload]);\r\n    });\r\n  });\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (props.custom) {\r\n      console.log(\"parmas\", params.id);\r\n      console.log(message);\r\n      const msgData = {\r\n        msg: message,\r\n        id: props.user.id,\r\n        time: new Date(),\r\n        to: params.id,\r\n      };\r\n      socket.emit(\"custom-message\", msgData);\r\n    } else {\r\n      console.log(message);\r\n      const msgData = {\r\n        msg: message,\r\n        id: props.user.id,\r\n        time: new Date(),\r\n      };\r\n      socket.emit(\"message\", msgData);\r\n    }\r\n\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h3 className=\" text-center\">Welcome {props?.user}</h3>\r\n        <div className=\"messaging\">\r\n          <div className=\"inbox_msg\">\r\n            <Users people={people} />\r\n            <div className=\"mesgs\">\r\n              <h4> {\"Public\"}</h4>\r\n              <div className=\"msg_history\">\r\n                {chat.map((msg) => {\r\n                  if (msg.id === props.user.id) {\r\n                    return (\r\n                      <div className=\"outgoing_msg\" key={msg.id}>\r\n                        <div className=\"sent_msg\">\r\n                          <p>{msg.msg}</p>\r\n                          <span className=\"time_date\"> {msg.time}</span>{\" \"}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  } else {\r\n                    return (\r\n                      <div className=\"incoming_msg\" key={msg.id}>\r\n                        <div className=\"incoming_msg_img\">\r\n                          <AccountCircleIcon />\r\n                        </div>\r\n                        <div className=\"received_msg\">\r\n                          <div className=\"received_withd_msg\">\r\n                            <p> {msg.msg}</p>\r\n                            <span className=\"time_date\">{msg.time}</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  }\r\n                })}\r\n              </div>\r\n              <div className=\"type_msg\">\r\n                <div className=\"input_msg_write\">\r\n                  <form onSubmit={sendMessage}>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"message\"\r\n                      placeholder=\"Type message\"\r\n                      value={message}\r\n                      onChange={(e) => {\r\n                        setMessage(e.target.value);\r\n                      }}\r\n                      required\r\n                    ></input>\r\n                    <button className=\"msg_send_btn\">\r\n                      <SendIcon style={{ color: \"#fff\" }} />\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    user: state?.user,\r\n    isloggedin: state?.isloggedin,\r\n  };\r\n})(Chat);\r\n","C:\\React\\WebChat\\src\\components\\Chat.jsx",["64","65"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport Users from \"./Users\";\r\nimport { connect } from \"react-redux\";\r\nimport socket from \"./socket\";\r\nimport immer from \"immer\";\r\nimport ScrollMePlease from \"react-scrollable-feed\";\r\n\r\n// const socketRef = useRef()\r\n\r\nfunction Chat(props) {\r\n  console.log(\"yrssss\", props?.messages);\r\n  socket.on(\"newuser\", (allusers) => {\r\n    console.log(\"asdasdasdsadasdasd\", props);\r\n    props.dispatch({\r\n      type: \"USERS\",\r\n      payload: allusers,\r\n    });\r\n  });\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  socket.on(\"new-client\", (allusers) => {\r\n    console.log(\"new online user found.....\", allusers);\r\n    props.dispatch({\r\n      type: \"USERS\",\r\n      payload: allusers,\r\n    });\r\n  });\r\n  socket.on(\"new message\", ({ content, sender, chatName }) => {\r\n    const newMessages = immer(props.messages, (draft) => {\r\n      if (draft[chatName]) {\r\n        draft[chatName].push({ content, sender });\r\n      } else {\r\n        draft[chatName] = [{ content, sender }];\r\n      }\r\n    });\r\n    // console.log(\"new message received\",newMessages)\r\n    props.dispatch({\r\n      type: \"MESSAGES\",\r\n      payload: newMessages,\r\n    });\r\n  });\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      content: message,\r\n      to: props.currentChat.isChannel\r\n        ? props.currentChat.chatName\r\n        : props.currentChat.receiverId,\r\n      sender: props.user,\r\n      chatName: props.currentChat.chatName,\r\n      isChannel: props.currentChat.isChannel,\r\n    };\r\n    socket.emit(\"send message\", payload);\r\n    const newMessages = immer(props.messages, (draft) => {\r\n      draft[props.currentChat.chatName].push({\r\n        sender: props.user,\r\n        content: message,\r\n      });\r\n    });\r\n    props.dispatch({\r\n      type: \"MESSAGES\",\r\n      payload: newMessages,\r\n    });\r\n    setMessage(\"\");\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h3 className=\" text-center\">Welcome {props.user}</h3>\r\n        <div className=\"messaging\">\r\n          <div className=\"inbox_msg\">\r\n            <Users />\r\n            <div className=\"mesgs\">\r\n              <h4>\r\n                {\" \"}\r\n                <AccountCircleIcon fontSize={\"large\"} />\r\n                {props?.currentChat?.chatName}\r\n              </h4>\r\n              <div className=\"msg_history\">\r\n                <ScrollMePlease>\r\n                  {props?.messages[props?.currentChat.chatName]\r\n                    ? props?.messages[props.currentChat.chatName].map(\r\n                        (each, index) => {\r\n                          if (each.sender === props?.user) {\r\n                            return (\r\n                              <div className=\"outgoing_msg\">\r\n                                <div className=\"sent_msg\">\r\n                                  <p>{each.content}</p>\r\n                                  <span className=\"time_date\">\r\n                                    {\" \"}\r\n                                    {each.sender}\r\n                                  </span>{\" \"}\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              <div className=\"incoming_msg\">\r\n                                <div className=\"incoming_msg_img\">\r\n                                  <AccountCircleIcon />\r\n                                </div>\r\n                                <div className=\"received_msg\">\r\n                                  <div className=\"received_withd_msg\">\r\n                                    <p>{each.content}</p>\r\n                                    <span className=\"time_date\">\r\n                                      {\" \"}\r\n                                      {each.sender}\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          }\r\n                        }\r\n                      )\r\n                    : \" \"}\r\n                </ScrollMePlease>\r\n              </div>\r\n              <div className=\"type_msg\">\r\n                <div className=\"input_msg_write\">\r\n                  <form onSubmit={sendMessage}>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"write_msg\"\r\n                      name=\"msg\"\r\n                      value={message}\r\n                      onChange={(e) => setMessage(e.target.value)}\r\n                      placeholder=\"Type a message\"\r\n                    />\r\n                    <button className=\"msg_send_btn\">\r\n                      <SendIcon style={{ color: \"#fff\" }} />\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    user: state?.user,\r\n    messages: state?.messages,\r\n    allusers: state?.allusers,\r\n    isloggedin: state?.isloggedin,\r\n    currentChat: state?.CurrentChat,\r\n  };\r\n})(Chat);\r\n","C:\\React\\WebChat\\src\\components\\Login.jsx",["66","67"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport socket from \"./socket\";\r\nimport { login } from \"../reduxstore/thunk\";\r\nimport immer from \"immer\";\r\nfunction Login(props) {\r\n  const [user, setUser] = useState();\r\n  // const [yourID, setYourID] = useState()\r\n  // console.log(\"login props\",props)\r\n  function joinCallback(messages, room) {\r\n    console.log(\"aaaa\", messages, room);\r\n    const newMessages = immer(messages, (draft) => {\r\n      draft[room] = room;\r\n    });\r\n    props.dispatch({\r\n      type: \"MESSAGE\",\r\n      payload: newMessages,\r\n    });\r\n  }\r\n\r\n  let submitHandle = (e) => {\r\n    e.preventDefault();\r\n    socket.emit(\"join\", user);\r\n    socket.emit(\"join room\", \"general\");\r\n    props.dispatch(login(user));\r\n    // socket.emit(\"Join\",userData)\r\n\r\n    props.history.push(\"/chat\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3\"></div>\r\n        <div className=\"col-md-6\">\r\n          <form onSubmit={submitHandle} style={{ width: 500 }}>\r\n            <h2 className=\"text-center\">Hop In</h2>\r\n            <label htmlFor=\"Username\" style={{ fontSize: 20, marginRight: 10 }}>\r\n              Username:{\" \"}\r\n            </label>\r\n            <input\r\n              onChange={(e) => setUser(e.target.value)}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Username\"\r\n            />\r\n            <br />\r\n            <button className=\"bth btn-dark form-control\">Join</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(function (state, props) {\r\n  return {\r\n    logged: state?.isloggedin,\r\n    messages: state?.messages,\r\n  };\r\n})(Login);\r\n","C:\\React\\WebChat\\src\\components\\socket.js",[],"C:\\React\\WebChat\\src\\reduxstore\\thunk.js",[],"C:\\React\\WebChat\\src\\components\\Users.jsx",["68","69","70","71"],"// import React, { useEffect, useState } from \"react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport immer from \"immer\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport class Users extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  SetGeneralChat = () => {\r\n    // console.log(\"room set\")\r\n    this.props.dispatch({\r\n      type: \"CURRENT CHAT\",\r\n      payload: {\r\n        isChannel: true,\r\n        chatName: \"general\",\r\n        receiverId: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  SetUserChat = (user) => {\r\n    this.props.dispatch({\r\n      type: \"CURRENT CHAT\",\r\n      payload: {\r\n        isChannel: false,\r\n        chatName: user.name,\r\n        receiverId: user.id,\r\n      },\r\n    });\r\n    //  console.log(\"checkkkk......\",this.props.currentChat.chatName)\r\n    if (!this.props.messages[user.name]) {\r\n      // console.log(\"set krunnn....\")\r\n      let newMessages = immer(this.props.messages, (draft) => {\r\n        draft[user.name] = [];\r\n      });\r\n      this.props.dispatch({\r\n        type: \"MESSAGES\",\r\n        payload: newMessages,\r\n      });\r\n      // console.log(\"user set\",newMessages)\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"inbox_people\">\r\n          <div className=\"headind_srch\">\r\n            <div className=\"recent_heading\">\r\n              <h4>Group</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"inbox_chat\">\r\n            <div className=\"chat_list\" onClick={this.SetGeneralChat}>\r\n              <div className=\"chat_people\">\r\n                <div className=\"chat_img\">\r\n                  {\" \"}\r\n                  <AccountCircleIcon />{\" \"}\r\n                </div>\r\n                <div className=\"chat_ib\">\r\n                  <h5>\r\n                    General <span className=\"chat_date\">0</span>\r\n                  </h5>\r\n                  <p>Messages on this receives by everyone</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"headind_srch\">\r\n              <div className=\"recent_heading\">\r\n                <h4>Online</h4>\r\n              </div>\r\n            </div>\r\n            {this.props?.allusers?.map((user) => {\r\n              if (this.props.user != user.name) {\r\n                return (\r\n                  <div\r\n                    className=\"chat_list\"\r\n                    key={user.id}\r\n                    onClick={() => this.SetUserChat(user)}\r\n                  >\r\n                    <div className=\"chat_people\">\r\n                      <div className=\"chat_img\">\r\n                        {\" \"}\r\n                        <AccountCircleIcon />{\" \"}\r\n                      </div>\r\n                      <div className=\"chat_ib\">\r\n                        <h5>\r\n                          {user.name} <span className=\"chat_date\">0</span>\r\n                        </h5>\r\n                        <p>ID: {user.id}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(function (state, props) {\r\n  return {\r\n    user: state?.user,\r\n    allusers: state?.allusers,\r\n    messages: state?.messages,\r\n    currentChat: state?.CurrentChat,\r\n  };\r\n})(Users);\r\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"76","severity":1,"message":"80","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":12},{"ruleId":"76","severity":1,"message":"81","line":8,"column":8,"nodeType":"78","messageId":"79","endLine":8,"endColumn":10},{"ruleId":"76","severity":1,"message":"82","line":9,"column":32,"nodeType":"78","messageId":"79","endLine":9,"endColumn":42},{"ruleId":"83","severity":1,"message":"84","line":15,"column":9,"nodeType":"85","endLine":15,"endColumn":46},{"ruleId":"76","severity":1,"message":"86","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":13},{"ruleId":"87","severity":1,"message":"88","line":4,"column":5,"nodeType":"89","messageId":"90","endLine":35,"endColumn":6},{"ruleId":"76","severity":1,"message":"91","line":1,"column":28,"nodeType":"78","messageId":"79","endLine":1,"endColumn":34},{"ruleId":"92","severity":1,"message":"93","line":10,"column":24,"nodeType":"94","messageId":"95","endLine":10,"endColumn":26},{"ruleId":"76","severity":1,"message":"96","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"91","line":1,"column":28,"nodeType":"78","messageId":"79","endLine":1,"endColumn":34},{"ruleId":"76","severity":1,"message":"96","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"97","line":10,"column":12,"nodeType":"78","messageId":"79","endLine":10,"endColumn":24},{"ruleId":"76","severity":1,"message":"98","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":9,"column":3,"nodeType":"101","messageId":"102","endLine":11,"endColumn":4},{"ruleId":"103","severity":1,"message":"104","line":76,"column":47,"nodeType":"105","messageId":"106","endLine":76,"endColumn":49},{"ruleId":"92","severity":1,"message":"93","line":77,"column":35,"nodeType":"94","messageId":"95","endLine":77,"endColumn":37},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'SendIcon' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'io' is defined but never used.","'useHistory' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'React' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useRef' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'joinCallback' is defined but never used.","'Link' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]