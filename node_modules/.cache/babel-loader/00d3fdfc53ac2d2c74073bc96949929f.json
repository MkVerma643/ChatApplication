{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\WebChat\\\\src\\\\components\\\\Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Users from \"./Users\";\nimport { connect } from \"react-redux\";\nimport socket from \"./socket\";\nimport immer from \"immer\";\nimport ScrollMePlease from \"react-scrollable-feed\"; // const socketRef = useRef()\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Chat(props) {\n  _s();\n\n  var _props$currentChat;\n\n  console.log(\"yrssss\", props === null || props === void 0 ? void 0 : props.messages);\n  socket.on(\"newuser\", allusers => {\n    console.log(\"asdasdasdsadasdasd\", props);\n    props.dispatch({\n      type: \"USERS\",\n      payload: allusers\n    });\n  });\n  const [message, setMessage] = useState(\"\");\n  socket.on(\"new-client\", allusers => {\n    console.log(\"new online user found.....\", allusers);\n    props.dispatch({\n      type: \"USERS\",\n      payload: allusers\n    });\n  });\n  socket.on(\"new message\", ({\n    content,\n    sender,\n    chatName\n  }) => {\n    const newMessages = immer(props.messages, draft => {\n      if (draft[chatName]) {\n        draft[chatName].push({\n          content,\n          sender\n        });\n      } else {\n        draft[chatName] = [{\n          content,\n          sender\n        }];\n      }\n    }); // console.log(\"new message received\",newMessages)\n\n    props.dispatch({\n      type: \"MESSAGES\",\n      payload: newMessages\n    });\n  });\n\n  const sendMessage = e => {\n    e.preventDefault();\n    const payload = {\n      content: message,\n      to: props.currentChat.isChannel ? props.currentChat.chatName : props.currentChat.receiverId,\n      sender: props.user,\n      chatName: props.currentChat.chatName,\n      isChannel: props.currentChat.isChannel\n    };\n    socket.emit(\"send message\", payload);\n    const newMessages = immer(props.messages, draft => {\n      draft[props.currentChat.chatName].push({\n        sender: props.user,\n        content: message\n      });\n    });\n    props.dispatch({\n      type: \"MESSAGES\",\n      payload: newMessages\n    });\n    setMessage(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        class: \" text-center\",\n        children: [\"Welcome \", props.user]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"messaging\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"inbox_msg\",\n          children: [/*#__PURE__*/_jsxDEV(Users, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"mesgs\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\" \", /*#__PURE__*/_jsxDEV(AccountCircleIcon, {\n                fontSize: \"large\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 17\n              }, this), props === null || props === void 0 ? void 0 : (_props$currentChat = props.currentChat) === null || _props$currentChat === void 0 ? void 0 : _props$currentChat.chatName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"msg_history\",\n              children: /*#__PURE__*/_jsxDEV(ScrollMePlease, {\n                children: (props === null || props === void 0 ? void 0 : props.messages[props === null || props === void 0 ? void 0 : props.currentChat.chatName]) ? props === null || props === void 0 ? void 0 : props.messages[props.currentChat.chatName].map((each, index) => {\n                  if (each.sender === (props === null || props === void 0 ? void 0 : props.user)) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      class: \"outgoing_msg\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        class: \"sent_msg\",\n                        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                          children: each.content\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 92,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          class: \"time_date\",\n                          children: [\" \", each.sender]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 93,\n                          columnNumber: 35\n                        }, this), \" \"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 91,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 31\n                    }, this);\n                  } else {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      class: \"incoming_msg\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        class: \"incoming_msg_img\",\n                        children: /*#__PURE__*/_jsxDEV(AccountCircleIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 104,\n                          columnNumber: 35\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 103,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        class: \"received_msg\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          class: \"received_withd_msg\",\n                          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                            children: each.content\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 108,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            class: \"time_date\",\n                            children: [\" \", each.sender]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 109,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 107,\n                          columnNumber: 35\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 106,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 31\n                    }, this);\n                  }\n                }) : \" \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"type_msg\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"input_msg_write\",\n                children: /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: sendMessage,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    class: \"write_msg\",\n                    name: \"msg\",\n                    value: message,\n                    onChange: e => setMessage(e.target.value),\n                    placeholder: \"Type a message\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    class: \"msg_send_btn\",\n                    children: /*#__PURE__*/_jsxDEV(SendIcon, {\n                      style: {\n                        color: \"#fff\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Chat, \"EiOGSxO4GWQlH0sM782nQ9JwuAs=\");\n\n_c = Chat;\nexport default connect((state, props) => {\n  return {\n    user: state === null || state === void 0 ? void 0 : state.user,\n    messages: state === null || state === void 0 ? void 0 : state.messages,\n    allusers: state === null || state === void 0 ? void 0 : state.allusers,\n    isloggedin: state === null || state === void 0 ? void 0 : state.isloggedin,\n    currentChat: state === null || state === void 0 ? void 0 : state.CurrentChat\n  };\n})(Chat);\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/React/WebChat/src/components/Chat.jsx"],"names":["React","useEffect","useRef","useState","AccountCircleIcon","SendIcon","Users","connect","socket","immer","ScrollMePlease","Chat","props","console","log","messages","on","allusers","dispatch","type","payload","message","setMessage","content","sender","chatName","newMessages","draft","push","sendMessage","e","preventDefault","to","currentChat","isChannel","receiverId","user","emit","map","each","index","target","value","color","state","isloggedin","CurrentChat"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport Users from \"./Users\";\r\nimport { connect } from \"react-redux\";\r\nimport socket from \"./socket\";\r\nimport immer from \"immer\";\r\nimport ScrollMePlease from \"react-scrollable-feed\";\r\n\r\n// const socketRef = useRef()\r\n\r\nfunction Chat(props) {\r\n  console.log(\"yrssss\", props?.messages);\r\n  socket.on(\"newuser\", (allusers) => {\r\n    console.log(\"asdasdasdsadasdasd\",props)\r\n    props.dispatch({\r\n      type: \"USERS\",\r\n      payload: allusers,\r\n    });\r\n  });\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  socket.on(\"new-client\", (allusers) => {\r\n    console.log(\"new online user found.....\", allusers);\r\n    props.dispatch({\r\n      type: \"USERS\",\r\n      payload: allusers,\r\n    });\r\n  });\r\n  socket.on(\"new message\", ({ content, sender, chatName }) => {\r\n    const newMessages = immer(props.messages, (draft) => {\r\n      if (draft[chatName]) {\r\n        draft[chatName].push({ content, sender });\r\n      } else {\r\n        draft[chatName] = [{ content, sender }];\r\n      }\r\n    });\r\n    // console.log(\"new message received\",newMessages)\r\n    props.dispatch({\r\n      type: \"MESSAGES\",\r\n      payload: newMessages,\r\n    });\r\n  });\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      content: message,\r\n      to: props.currentChat.isChannel\r\n        ? props.currentChat.chatName\r\n        : props.currentChat.receiverId,\r\n      sender: props.user,\r\n      chatName: props.currentChat.chatName,\r\n      isChannel: props.currentChat.isChannel,\r\n    };\r\n    socket.emit(\"send message\", payload);\r\n    const newMessages = immer(props.messages, (draft) => {\r\n      draft[props.currentChat.chatName].push({\r\n        sender: props.user,\r\n        content: message,\r\n      });\r\n    });\r\n    props.dispatch({\r\n      type: \"MESSAGES\",\r\n      payload: newMessages,\r\n    });\r\n    setMessage(\"\");\r\n  };\r\n  return (\r\n    <>\r\n      <div class=\"container\">\r\n        <h3 class=\" text-center\">Welcome {props.user}</h3>\r\n        <div class=\"messaging\">\r\n          <div class=\"inbox_msg\">\r\n            <Users />\r\n            <div class=\"mesgs\">\r\n              <h4>\r\n                {\" \"}\r\n                <AccountCircleIcon fontSize={\"large\"} />\r\n                {props?.currentChat?.chatName}\r\n              </h4>\r\n              <div class=\"msg_history\">\r\n                <ScrollMePlease>\r\n                  {props?.messages[props?.currentChat.chatName]\r\n                    ? props?.messages[props.currentChat.chatName].map(\r\n                        (each, index) => {\r\n                          if (each.sender === props?.user) {\r\n                            return (\r\n                              <div class=\"outgoing_msg\">\r\n                                <div class=\"sent_msg\">\r\n                                  <p>{each.content}</p>\r\n                                  <span class=\"time_date\">\r\n                                    {\" \"}\r\n                                    {each.sender}\r\n                                  </span>{\" \"}\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              <div class=\"incoming_msg\">\r\n                                <div class=\"incoming_msg_img\">\r\n                                  <AccountCircleIcon />\r\n                                </div>\r\n                                <div class=\"received_msg\">\r\n                                  <div class=\"received_withd_msg\">\r\n                                    <p>{each.content}</p>\r\n                                    <span class=\"time_date\">\r\n                                      {\" \"}\r\n                                      {each.sender}\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          }\r\n                        }\r\n                      )\r\n                    : \" \"}\r\n                </ScrollMePlease>\r\n              </div>\r\n              <div class=\"type_msg\">\r\n                <div class=\"input_msg_write\">\r\n                  <form onSubmit={sendMessage}>\r\n                    <input\r\n                      type=\"text\"\r\n                      class=\"write_msg\"\r\n                      name=\"msg\"\r\n                      value={message}\r\n                      onChange={(e) => setMessage(e.target.value)}\r\n                      placeholder=\"Type a message\"\r\n                    />\r\n                    <button class=\"msg_send_btn\">\r\n                      <SendIcon style={{ color: \"#fff\" }} />\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    user: state?.user,\r\n    messages: state?.messages,\r\n    allusers: state?.allusers,\r\n    isloggedin: state?.isloggedin,\r\n    currentChat: state?.CurrentChat,\r\n  };\r\n})(Chat);\r\n"]},"metadata":{},"sourceType":"module"}