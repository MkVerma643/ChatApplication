{"ast":null,"code":"import _slicedToArray from\"C:/React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from\"react\";import AccountCircleIcon from\"@material-ui/icons/AccountCircle\";import SendIcon from\"@material-ui/icons/Send\";import Users from\"./Users\";import{connect}from\"react-redux\";import socket from\"./socket\";import immer from\"immer\";import ScrollMePlease from\"react-scrollable-feed\";// const socketRef = useRef()\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function Chat(props){var _props$currentChat;console.log(\"yrssss\",props===null||props===void 0?void 0:props.messages);socket.on(\"newuser\",function(allusers){console.log(\"asdasdasdsadasdasd\",props);props.dispatch({type:\"USERS\",payload:allusers});});var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),message=_useState2[0],setMessage=_useState2[1];socket.on(\"new-client\",function(allusers){console.log(\"new online user found.....\",allusers);props.dispatch({type:\"USERS\",payload:allusers});});socket.on(\"new message\",function(_ref){var content=_ref.content,sender=_ref.sender,chatName=_ref.chatName;var newMessages=immer(props.messages,function(draft){if(draft[chatName]){draft[chatName].push({content:content,sender:sender});}else{draft[chatName]=[{content:content,sender:sender}];}});// console.log(\"new message received\",newMessages)\nprops.dispatch({type:\"MESSAGES\",payload:newMessages});});var sendMessage=function sendMessage(e){e.preventDefault();var payload={content:message,to:props.currentChat.isChannel?props.currentChat.chatName:props.currentChat.receiverId,sender:props.user,chatName:props.currentChat.chatName,isChannel:props.currentChat.isChannel};socket.emit(\"send message\",payload);var newMessages=immer(props.messages,function(draft){draft[props.currentChat.chatName].push({sender:props.user,content:message});});props.dispatch({type:\"MESSAGES\",payload:newMessages});setMessage(\"\");};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\" text-center\",children:[\"Welcome \",props.user]}),/*#__PURE__*/_jsx(\"div\",{className:\"messaging\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"inbox_msg\",children:[/*#__PURE__*/_jsx(Users,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"mesgs\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\" \",/*#__PURE__*/_jsx(AccountCircleIcon,{fontSize:\"large\"}),props===null||props===void 0?void 0:(_props$currentChat=props.currentChat)===null||_props$currentChat===void 0?void 0:_props$currentChat.chatName]}),/*#__PURE__*/_jsx(\"div\",{className:\"msg_history\",children:/*#__PURE__*/_jsx(ScrollMePlease,{children:(props===null||props===void 0?void 0:props.messages[props===null||props===void 0?void 0:props.currentChat.chatName])?props===null||props===void 0?void 0:props.messages[props.currentChat.chatName].map(function(each,index){if(each.sender===(props===null||props===void 0?void 0:props.user)){return/*#__PURE__*/_jsx(\"div\",{className:\"outgoing_msg\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"sent_msg\",children:[/*#__PURE__*/_jsx(\"p\",{children:each.content}),/*#__PURE__*/_jsxs(\"span\",{className:\"time_date\",children:[\" \",each.sender]}),\" \"]})});}else{return/*#__PURE__*/_jsxs(\"div\",{className:\"incoming_msg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"incoming_msg_img\",children:/*#__PURE__*/_jsx(AccountCircleIcon,{})}),/*#__PURE__*/_jsx(\"div\",{className:\"received_msg\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"received_withd_msg\",children:[/*#__PURE__*/_jsx(\"p\",{children:each.content}),/*#__PURE__*/_jsxs(\"span\",{className:\"time_date\",children:[\" \",each.sender]})]})})]});}}):\" \"})}),/*#__PURE__*/_jsx(\"div\",{className:\"type_msg\",children:/*#__PURE__*/_jsx(\"div\",{className:\"input_msg_write\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:sendMessage,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"write_msg\",name:\"msg\",value:message,onChange:function onChange(e){return setMessage(e.target.value);},placeholder:\"Type a message\"}),/*#__PURE__*/_jsx(\"button\",{className:\"msg_send_btn\",children:/*#__PURE__*/_jsx(SendIcon,{style:{color:\"#fff\"}})})]})})})]})]})})]})});}export default connect(function(state,props){return{user:state===null||state===void 0?void 0:state.user,messages:state===null||state===void 0?void 0:state.messages,allusers:state===null||state===void 0?void 0:state.allusers,isloggedin:state===null||state===void 0?void 0:state.isloggedin,currentChat:state===null||state===void 0?void 0:state.CurrentChat};})(Chat);","map":{"version":3,"sources":["C:/React/WebChat/src/components/Chat.jsx"],"names":["React","useEffect","useRef","useState","AccountCircleIcon","SendIcon","Users","connect","socket","immer","ScrollMePlease","Chat","props","console","log","messages","on","allusers","dispatch","type","payload","message","setMessage","content","sender","chatName","newMessages","draft","push","sendMessage","e","preventDefault","to","currentChat","isChannel","receiverId","user","emit","map","each","index","target","value","color","state","isloggedin","CurrentChat"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport Users from \"./Users\";\r\nimport { connect } from \"react-redux\";\r\nimport socket from \"./socket\";\r\nimport immer from \"immer\";\r\nimport ScrollMePlease from \"react-scrollable-feed\";\r\n\r\n// const socketRef = useRef()\r\n\r\nfunction Chat(props) {\r\n  console.log(\"yrssss\", props?.messages);\r\n  socket.on(\"newuser\", (allusers) => {\r\n    console.log(\"asdasdasdsadasdasd\", props);\r\n    props.dispatch({\r\n      type: \"USERS\",\r\n      payload: allusers,\r\n    });\r\n  });\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  socket.on(\"new-client\", (allusers) => {\r\n    console.log(\"new online user found.....\", allusers);\r\n    props.dispatch({\r\n      type: \"USERS\",\r\n      payload: allusers,\r\n    });\r\n  });\r\n  socket.on(\"new message\", ({ content, sender, chatName }) => {\r\n    const newMessages = immer(props.messages, (draft) => {\r\n      if (draft[chatName]) {\r\n        draft[chatName].push({ content, sender });\r\n      } else {\r\n        draft[chatName] = [{ content, sender }];\r\n      }\r\n    });\r\n    // console.log(\"new message received\",newMessages)\r\n    props.dispatch({\r\n      type: \"MESSAGES\",\r\n      payload: newMessages,\r\n    });\r\n  });\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      content: message,\r\n      to: props.currentChat.isChannel\r\n        ? props.currentChat.chatName\r\n        : props.currentChat.receiverId,\r\n      sender: props.user,\r\n      chatName: props.currentChat.chatName,\r\n      isChannel: props.currentChat.isChannel,\r\n    };\r\n    socket.emit(\"send message\", payload);\r\n    const newMessages = immer(props.messages, (draft) => {\r\n      draft[props.currentChat.chatName].push({\r\n        sender: props.user,\r\n        content: message,\r\n      });\r\n    });\r\n    props.dispatch({\r\n      type: \"MESSAGES\",\r\n      payload: newMessages,\r\n    });\r\n    setMessage(\"\");\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h3 className=\" text-center\">Welcome {props.user}</h3>\r\n        <div className=\"messaging\">\r\n          <div className=\"inbox_msg\">\r\n            <Users />\r\n            <div className=\"mesgs\">\r\n              <h4>\r\n                {\" \"}\r\n                <AccountCircleIcon fontSize={\"large\"} />\r\n                {props?.currentChat?.chatName}\r\n              </h4>\r\n              <div className=\"msg_history\">\r\n                <ScrollMePlease>\r\n                  {props?.messages[props?.currentChat.chatName]\r\n                    ? props?.messages[props.currentChat.chatName].map(\r\n                        (each, index) => {\r\n                          if (each.sender === props?.user) {\r\n                            return (\r\n                              <div className=\"outgoing_msg\">\r\n                                <div className=\"sent_msg\">\r\n                                  <p>{each.content}</p>\r\n                                  <span className=\"time_date\">\r\n                                    {\" \"}\r\n                                    {each.sender}\r\n                                  </span>{\" \"}\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              <div className=\"incoming_msg\">\r\n                                <div className=\"incoming_msg_img\">\r\n                                  <AccountCircleIcon />\r\n                                </div>\r\n                                <div className=\"received_msg\">\r\n                                  <div className=\"received_withd_msg\">\r\n                                    <p>{each.content}</p>\r\n                                    <span className=\"time_date\">\r\n                                      {\" \"}\r\n                                      {each.sender}\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          }\r\n                        }\r\n                      )\r\n                    : \" \"}\r\n                </ScrollMePlease>\r\n              </div>\r\n              <div className=\"type_msg\">\r\n                <div className=\"input_msg_write\">\r\n                  <form onSubmit={sendMessage}>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"write_msg\"\r\n                      name=\"msg\"\r\n                      value={message}\r\n                      onChange={(e) => setMessage(e.target.value)}\r\n                      placeholder=\"Type a message\"\r\n                    />\r\n                    <button className=\"msg_send_btn\">\r\n                      <SendIcon style={{ color: \"#fff\" }} />\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect((state, props) => {\r\n  return {\r\n    user: state?.user,\r\n    messages: state?.messages,\r\n    allusers: state?.allusers,\r\n    isloggedin: state?.isloggedin,\r\n    currentChat: state?.CurrentChat,\r\n  };\r\n})(Chat);\r\n"]},"metadata":{},"sourceType":"module"}